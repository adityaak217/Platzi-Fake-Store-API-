{
	"info": {
		"_postman_id": "dd5daab4-e26f-4f96-b9b1-dc8a9030dfde",
		"name": "Platzi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29004469",
		"_collection_link": "https://galactic-space-92498.postman.co/workspace/Platzi~8beb9ce5-10e0-4be0-a9ed-4d059c4a0e3e/collection/29004469-dd5daab4-e26f-4f96-b9b1-dc8a9030dfde?action=share&source=collection_link&creator=29004469"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Get user with  valid limit number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v1/users/?limit=5",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								""
							],
							"query": [
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user with  0 limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v1/users?limit=0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							],
							"query": [
								{
									"key": "limit",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user with  empty limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"string_you_want_to_search\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v1/users?limit=",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							],
							"query": [
								{
									"key": "limit",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user with  maximum limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v1/users?limit=10000",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							],
							"query": [
								{
									"key": "limit",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user with  negative value limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v1/users?limit=-12",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							],
							"query": [
								{
									"key": "limit",
									"value": "-12"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new user with all valid credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json().role).to.include(\"admin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"jsonparse = pm.response.json()\r",
									"pm.collectionVariables.set(\"userid\", jsonparse.id)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"name\": \"{{validName}}\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"role\": \"admin\",\r\n  \"avatar\": \"{{validAvatar}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v1/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "create new user with invalid email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json().message).to.include(\"email must be an email\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{invalidMail}}\",\r\n  \"name\": \"{{validName}}\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"role\": \"admin\",\r\n  \"avatar\": \"{{validAvatar}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v1/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "create new user with empty email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json().message).to.include(\"email should not be empty\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"\",\r\n  \"name\": \"{{validName}}\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"role\": \"admin\",\r\n  \"avatar\": \"{{validAvatar}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v1/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "create new user with empty name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json().message).to.include(\"name should not be empty\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"name\": \"\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"role\": \"admin\",\r\n  \"avatar\": \"{{validAvatar}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v1/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "create new user with name below minimum characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json().message).to.include(\"name should not be below 3 character\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"name\": \"S\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"role\": \"admin\",\r\n  \"avatar\": \"{{validAvatar}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v1/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "create new user with name  having maximum characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json().message).to.include(\"name should not be above 100 character\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"name\": \"The display of character renders for non-profit purposes has so far been allowed by Nickelodeon as long as proper credit is given.\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"role\": \"admin\",\r\n  \"avatar\": \"{{validAvatar}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v1/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "create new user with name having only symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json().message).to.include(\"Name must contain only alphabetic characters\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"name\": \"@#$%\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"role\": \"admin\",\r\n  \"avatar\": \"{{validAvatar}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v1/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "create new user with valid password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json().password).to.include(\"scar125t\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"name\": \"{{validName}}\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"role\": \"admin\",\r\n  \"avatar\": \"{{validAvatar}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v1/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "create new user with empty  password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json().message).to.include(\"password should not be empty\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"name\": \"{{validName}}\",\r\n  \"password\": \"\",\r\n  \"role\": \"admin\",\r\n  \"avatar\": \"{{validAvatar}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v1/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "create new user with password below 4 character",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json().message).to.include(\"password must be longer than or equal to 4 characters\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"name\": \"{{validName}}\",\r\n  \"password\": \"abc\",\r\n  \"role\": \"admin\",\r\n  \"avatar\": \"{{validAvatar}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v1/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "create new user with weak password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json().message).to.include(\"Password must include at least one uppercase letter, one number, and one special character\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"name\": \"Scarlet Ring\",\r\n  \"password\": \"1234\",\r\n  \"role\": \"admin\",\r\n  \"avatar\": \"https://en.wikipedia.org/wiki/Aang#/media/File:Avatar_Aang.png\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v1/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new user with invalid role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json().message).to.include(\"role must be one of the following values: admin, customer\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"name\": \"{{validName}}\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"role\": \"staff\",\r\n  \"avatar\": \"{{validAvatar}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v1/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new user with Empty role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json().message).to.include(\"role must be one of the following values: admin, customer\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"name\": \"{{validName}}\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"role\": \"\",\r\n  \"avatar\": \"{{validAvatar}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v1/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new user with Empty Avatar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json().message).to.include(\"avatar should not be empty\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"name\": \"{{validName}}\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"role\": \"admin\",\r\n  \"avatar\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v1/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new user with invalid avatar field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json().message).to.include(\"avatar must be a URL address\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"name\": \"{{validName}}\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"role\": \"admin\",\r\n  \"avatar\": \"collection\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v1/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v1/users/:userid",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								":userid"
							],
							"variable": [
								{
									"key": "userid",
									"value": "{{userid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json().message).to.include(\"Validation failed (numeric string is expected\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v1/users/:userid",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								":userid"
							],
							"variable": [
								{
									"key": "userid",
									"value": "invalid123"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update user  by invalid Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json().message).to.include(\"email must be an email\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"invalidmail\",\r\n  \"name\": \"{{validName}}\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"role\": \"admin\",\r\n  \"avatar\": \"{{validAvatar}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v1/users/:userid",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								":userid"
							],
							"variable": [
								{
									"key": "userid",
									"value": "{{userid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Partial Update on User Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json().name).to.include(\"aditya khanal\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n  \"name\": \"aditya khanal\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v1/users/:userid",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								":userid"
							],
							"variable": [
								{
									"key": "userid",
									"value": "{{userid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Non-existent User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json().message).to.include(\"Could not find any entity of type\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"name\": \"{{validName}}\",\r\n  \"password\": \"{{validPassword}}\",\r\n  \"role\": \"admin\",\r\n  \"avatar\": \"{{validAvatar}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v1/users/:userid",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								":userid"
							],
							"variable": [
								{
									"key": "userid",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete user by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response confirms deletion\", function () {\r",
									"    let response = pm.response.text();\r",
									"    \r",
									" \r",
									"    pm.expect(response).to.include(\"true\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v1/users/:userid",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								":userid"
							],
							"variable": [
								{
									"key": "userid",
									"value": "{{userid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://api.escuelajs.co",
			"type": "string"
		},
		{
			"key": "invalidMail",
			"value": "abc123",
			"type": "string"
		},
		{
			"key": "validName",
			"value": "Scarlet Ring",
			"type": "string"
		},
		{
			"key": "validPassword",
			"value": "scar125t",
			"type": "string"
		},
		{
			"key": "validAvatar",
			"value": "https://en.wikipedia.org/wiki/Aang#/media/File:Avatar_Aang.png",
			"type": "string"
		},
		{
			"key": "null",
			"value": ""
		},
		{
			"key": "userid",
			"value": ""
		}
	]
}